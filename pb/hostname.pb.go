// Code generated by protoc-gen-go. DO NOT EDIT.
// source: hostname.proto

package hostname

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PodHostnameResponse struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PodHostnameResponse) Reset()         { *m = PodHostnameResponse{} }
func (m *PodHostnameResponse) String() string { return proto.CompactTextString(m) }
func (*PodHostnameResponse) ProtoMessage()    {}
func (*PodHostnameResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_412c89e20cb3d4bd, []int{0}
}

func (m *PodHostnameResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PodHostnameResponse.Unmarshal(m, b)
}
func (m *PodHostnameResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PodHostnameResponse.Marshal(b, m, deterministic)
}
func (m *PodHostnameResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodHostnameResponse.Merge(m, src)
}
func (m *PodHostnameResponse) XXX_Size() int {
	return xxx_messageInfo_PodHostnameResponse.Size(m)
}
func (m *PodHostnameResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PodHostnameResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PodHostnameResponse proto.InternalMessageInfo

func (m *PodHostnameResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_412c89e20cb3d4bd, []int{1}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

func init() {
	proto.RegisterType((*PodHostnameResponse)(nil), "PodHostnameResponse")
	proto.RegisterType((*Empty)(nil), "Empty")
}

func init() { proto.RegisterFile("hostname.proto", fileDescriptor_412c89e20cb3d4bd) }

var fileDescriptor_412c89e20cb3d4bd = []byte{
	// 124 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcb, 0xc8, 0x2f, 0x2e,
	0xc9, 0x4b, 0xcc, 0x4d, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0xd2, 0xe4, 0x12, 0x0e, 0xc8,
	0x4f, 0xf1, 0x80, 0x0a, 0x06, 0xa5, 0x16, 0x17, 0xe4, 0xe7, 0x15, 0xa7, 0x0a, 0x09, 0x71, 0xb1,
	0x80, 0xf8, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x60, 0xb6, 0x12, 0x3b, 0x17, 0xab, 0x6b,
	0x6e, 0x41, 0x49, 0xa5, 0x91, 0x1b, 0x97, 0x10, 0x4c, 0x43, 0x40, 0x7e, 0x4a, 0x70, 0x6a, 0x51,
	0x59, 0x66, 0x72, 0xaa, 0x90, 0x01, 0x17, 0x9f, 0x7b, 0x6a, 0x09, 0x92, 0x61, 0x42, 0x6c, 0x7a,
	0x60, 0xf5, 0x52, 0x22, 0x7a, 0x58, 0xac, 0x50, 0x62, 0x48, 0x62, 0x03, 0x3b, 0xc1, 0x18, 0x10,
	0x00, 0x00, 0xff, 0xff, 0xff, 0xd4, 0x24, 0x5b, 0x94, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HostnamePodServiceClient is the client API for HostnamePodService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HostnamePodServiceClient interface {
	GetPodHostname(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PodHostnameResponse, error)
}

type hostnamePodServiceClient struct {
	cc *grpc.ClientConn
}

func NewHostnamePodServiceClient(cc *grpc.ClientConn) HostnamePodServiceClient {
	return &hostnamePodServiceClient{cc}
}

func (c *hostnamePodServiceClient) GetPodHostname(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PodHostnameResponse, error) {
	out := new(PodHostnameResponse)
	err := c.cc.Invoke(ctx, "/HostnamePodService/GetPodHostname", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HostnamePodServiceServer is the server API for HostnamePodService service.
type HostnamePodServiceServer interface {
	GetPodHostname(context.Context, *Empty) (*PodHostnameResponse, error)
}

// UnimplementedHostnamePodServiceServer can be embedded to have forward compatible implementations.
type UnimplementedHostnamePodServiceServer struct {
}

func (*UnimplementedHostnamePodServiceServer) GetPodHostname(ctx context.Context, req *Empty) (*PodHostnameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPodHostname not implemented")
}

func RegisterHostnamePodServiceServer(s *grpc.Server, srv HostnamePodServiceServer) {
	s.RegisterService(&_HostnamePodService_serviceDesc, srv)
}

func _HostnamePodService_GetPodHostname_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostnamePodServiceServer).GetPodHostname(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HostnamePodService/GetPodHostname",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostnamePodServiceServer).GetPodHostname(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _HostnamePodService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "HostnamePodService",
	HandlerType: (*HostnamePodServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPodHostname",
			Handler:    _HostnamePodService_GetPodHostname_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hostname.proto",
}
